# yamllint disable rule:line-length
---
name: packages

description: |
  Specify version to install optional terraform-action@workflows packages and
  perform scan. Use "installed" to perform static analysis with package
  pre-installed on Runner.

inputs:

  working-directory:
    description: Set working directory. Default is ./.
    required: false
    default: .

  cosign-version:
    description: Specify cosign version or "installed" to perform scan. Leave blank to skip.
    required: false
    default: "false"

  terraform-version:
    description: Specify terraform version or "installed" to perform scan. Leave blank to skip.
    required: false
    default: "false"

  tflint-version:
    description: Specify tflint version or "installed" to perform scan. Leave blank to skip.
    required: false
    default: "false"

  checkov-version:
    description: Specify checkov version or "installed" to perform scan. Leave blank to skip.
    required: false
    default: "false"

  snyk-version:
    description: Specify snyk version or "installed" to perform scan. Leave blank to skip.
    required: false
    default: "false"

  terrascan-version:
    description: Specify terrascan version or "installed" to perform scan. Leave blank to skip.
    required: false
    default: "false"

  trivy-version:
    description: Specify trivy version or "installed" to perform scan. Leave blank to skip.
    required: false
    default: "false"

runs:
  using: "composite"

  steps:
    - name: install cosign
      if: ${{ inputs.cosign-version != 'false' }}
      uses: sigstore/cosign-installer@main
      with:
        cosign-release: v${{ inputs.cosign-version }}

    - name: install terraform
      if: ${{ inputs.terraform-version != 'false' }}
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        #!/usr/bin/env bash
        echo "Install terraform v${{ inputs.terraform-version }}"

        # download and import HashiCorp public key
        curl --remote-name https://keybase.io/hashicorp/pgp_keys.asc
        if result=$(gpg --import pgp_keys.asc 2>&1); then
          echo "loaded HashiCorp public key"
        else
            echo "Unable to import HashiCorp key"
            echo "GPG Output:"
            echo "$result"
        fi

        # download terraform installation packages
        curl --remote-name "https://releases.hashicorp.com/terraform/${{ inputs.terraform-version }}/terraform_${{ inputs.terraform-version }}_linux_amd64.zip"
        curl --remote-name "https://releases.hashicorp.com/terraform/${{ inputs.terraform-version }}/terraform_${{ inputs.terraform-version }}_SHA256SUMS"
        curl --remote-name "https://releases.hashicorp.com/terraform/${{ inputs.terraform-version }}/terraform_${{ inputs.terraform-version }}_SHA256SUMS.sig"

        # verify SHA signature
        if result=$(gpg --verify "terraform_${{ inputs.terraform-version }}_SHA256SUMS.sig" "terraform_${{ inputs.terraform-version }}_SHA256SUMS" 2>&1); then
            echo "Verified SHA signature"
        else
            echo "Unable to verify SHA signature"
            echo "GPG Output:"
            echo "$result"
            exit 1
        fi

        # verify terraform cli package
        if result=$(shasum --ignore-missing --algorithm 256 --check "terraform_${{ inputs.terraform-version }}_SHA256SUMS" 2>&1); then
            echo "Verified terraform package"
        else
            echo "Unable to verify terraform package"
            echo "shasum Output:"
            echo "$result"
            exit 1
        fi

        # install and smoke test terraform cli
        sudo unzip -o "terraform_${{ inputs.terraform-version }}_linux_amd64.zip" -d /usr/local/bin
        terraform version

    - name: install tflint
      if: ${{ inputs.tflint-version != 'false' }}
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        #!/usr/bin/env bash
        echo "Install tflint v${{ inputs.tflint-version }}"

        # download tflint and verification packages
        curl -SLO "https://github.com/terraform-linters/tflint/releases/download/v${{ inputs.tflint-version }}/tflint_linux_amd64.zip"
        curl -SLO "https://github.com/terraform-linters/tflint/releases/download/v${{ inputs.tflint-version }}/checksums.txt"
        curl -SLO "https://github.com/terraform-linters/tflint/releases/download/v${{ inputs.tflint-version }}/checksums.txt.pem"
        curl -SLO "https://github.com/terraform-linters/tflint/releases/download/v${{ inputs.tflint-version }}/checksums.txt.keyless.sig"

        # verify cosign origination
        if result=$(cosign verify-blob --certificate=checksums.txt.pem --signature=checksums.txt.keyless.sig --certificate-identity-regexp="^https://github.com/terraform-linters/tflint" --certificate-oidc-issuer=https://token.actions.githubusercontent.com checksums.txt 2>&1); then
            echo "Verified cosign build source"
        else
            echo "Unable to verify cosign build source"
            echo "cosign Output:"
            echo "$result"
            exit 1
        fi

        # verify cosign package sha
        if result=$(shasum --ignore-missing --algorithm 256 --check  checksums.txt 2>&1); then
            echo "Verified tflint package sha"
        else
            echo "Unable to verify tflint package sha"
            echo "shasum Output:"
            echo "$result"
            exit 1
        fi

        # install and smoke test tflint
        sudo unzip -o tflint_linux_amd64.zip -d /usr/local/bin
        tflint --version

    - name: install checkov
      if: ${{ inputs.checkov-version != 'false' }}
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        #!/usr/bin/env bash
        echo "Install checkov v${{ inputs.checkov-version }}"

        sudo pip install --no-cache-dir checkov==${{ inputs.checkov-version }}
        checkov --version

    - name: install snyk
      if: ${{ inputs.snyk-version != 'false' }}
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        #!/usr/bin/env bash
        echo "Install snyk v${{ inputs.snyk-version }}"

        # download snyk and verification packages
        SNYK_SIGNING_KEY=A22665FB96CAB0E0973604C83676C4B8289C296E
        SNYK_PACKAGE_NAME=$(grep -q 'ID=alpine' /etc/os-release && echo "snyk-alpine" || echo "snyk-linux")
        curl -sSLO "https://static.snyk.io/cli/v${{ inputs.snyk-version }}/${SNYK_PACKAGE_NAME}"
        curl -sSLO "https://static.snyk.io/cli/v${{ inputs.snyk-version }}/sha256sums.txt.asc"
        grep "${SNYK_PACKAGE_NAME}" < sha256sums.txt.asc > checksums.txt
        gpg --keyserver hkps://keys.openpgp.org --recv-keys "${SNYK_SIGNING_KEY}"

        # verify snyk package sha
        if result=$(shasum --ignore-missing --algorithm 256 --check  checksums.txt 2>&1); then
            echo "Verified snyk package sha"
        else
            echo "Unable to verify snyk package sha"
            echo "shasum Output:"
            echo "$result"
            exit 1
        fi

        # verify signature
        if result=$(gpg --verify sha256sums.txt.asc  2>&1); then
            echo "Verified signature"
        else
            echo "Unable to verify signature"
            echo "GPG Output:"
            echo "$result"
            exit 1
        fi

        # install and smoke test snyk
        sudo chmod +x "${SNYK_PACKAGE_NAME}"
        sudo mv "${SNYK_PACKAGE_NAME}" /usr/local/bin/snyk
        snyk version

    - name: install terrascan
      if: ${{ inputs.terrascan-version != 'false' }}
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        #!/usr/bin/env bash
        echo "Install terrascan v${{ inputs.terrascan-version }}"

        # download terrascan and verification packages
        curl -SLO "https://github.com/tenable/terrascan/releases/download/v${{ inputs.terrascan-version }}/checksums.txt"
        curl -SLO "https://github.com/tenable/terrascan/releases/download/v${{ inputs.terrascan-version }}/terrascan_${{ inputs.terrascan-version }}_Linux_x86_64.tar.gz"

        # verify terrascan package sha
        if result=$(shasum --ignore-missing --algorithm 256 --check  checksums.txt 2>&1); then
            echo "Verified terrascan package sha"
        else
            echo "Unable to verify terrascan package sha"
            echo "shasum Output:"
            echo "$result"
            exit 1
        fi

        # install and smoke test terrascan
        sudo tar -xf "terrascan_${{ inputs.terrascan-version }}_Linux_x86_64.tar.gz" terrascan
        sudo mv terrascan /usr/local/bin/terrascan
        terrascan version

    - name: install trivy
      if: ${{ inputs.trivy-version != 'false' }}
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        #!/usr/bin/env bash
        echo "Install trivy v${{ inputs.trivy-version }}"
        # download trivy package and verification packages
        curl -SLO "https://github.com/aquasecurity/trivy/releases/download/v${{ inputs.trivy-version }}/trivy_${{ inputs.trivy-version }}_Linux-64bit.tar.gz"
        curl -SLO "https://github.com/aquasecurity/trivy/releases/download/v${{ inputs.trivy-version }}/trivy_${{ inputs.trivy-version }}_Linux-64bit.tar.gz.pem"
        curl -SLO "https://github.com/aquasecurity/trivy/releases/download/v${{ inputs.trivy-version }}/trivy_${{ inputs.trivy-version }}_Linux-64bit.tar.gz.sig"

        # verify signature
        if result=$(cosign verify-blob "trivy_${{ inputs.trivy-version }}_Linux-64bit.tar.gz" --certificate "trivy_${{ inputs.trivy-version }}_Linux-64bit.tar.gz.pem" --signature "trivy_${{ inputs.trivy-version }}_Linux-64bit.tar.gz.sig" --certificate-identity-regexp 'https://github\.com/aquasecurity/trivy/\.github/workflows/.+' --certificate-oidc-issuer "https://token.actions.githubusercontent.com" 2>&1); then
            echo "Verified trivy installation package"
        else
            echo "Unable to verify trivy installation package"
            echo "cosign Output:"
            echo "$result"
            exit 1
        fi

        # install and smoke test trivy
        sudo tar -xzf "trivy_${{ inputs.trivy-version }}_Linux-64bit.tar.gz"
        sudo mv trivy /usr/local/bin/trivy
        trivy --version
