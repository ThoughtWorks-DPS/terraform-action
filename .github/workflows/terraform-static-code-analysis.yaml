---
run-name: Terraform static code analysis

on:
  workflow_call:

    inputs:

      working-directory:
        description: set working directory; default is .
        required: false
        type: string
        default: .

      cosign-version:
        description: Specify cosign version
        required: false
        type: string
        default: installed

      terraform-version:
        description: |
          If you specify a specific version, it will be installed and used by
          all orb terraform functions. Leave blank or specify version "installed"
          to use the version already installed on the executor.
        required: false
        type: string
        default: ""

      terraform-init-additional-args:
        description: |
          Include any additional terraform init command arguments.
          Default is -backend=false.
        required: false
        type: string
        default: -backend=false

      tflint-version:
        description: |
          Perform tflint scan of terraform files. Specify version "installed" to use the version
          already installed on the executor.
        required: false
        type: string
        default: ""

      tflint-provider:
        description: Cloud provider. aws, google, or azurerm
        required: false
        type: string
        default: ""

      tflint-provider-version:
        description: Provider plugin version.
        required: false
        type: string
        default: ""

      tflint-additional-args:
        description: |
          Include any additional tflint commandline arguments. Note: not all
          options can be successfully used in a pipeline.
        required: false
        type: string
        default: ""

      tfsec-version:
        description: |
          Perform tfsec scan of terraform files. Specify version "installed" to use the version
          already installed on the executor.
        required: false
        type: string
        default: ""

      tfsec-additional-args:
        description: |
          Include any additional tfsec commandline arguments.
        required: false
        type: string
        default: ""

      checkov-version:
        description: |
          Perform checkov scan of terraform files without plan output. Specify
          version "installed" to use the version already installed on the executor.
        required: false
        type: string
        default: ""

      checkov-additional-args:
        description: |
          Include any additional checkov commandline arguments.
        required: false
        type: string
        default: "-d ."

      snyk-version:
        description: |
          Perform snyk IaC scan of terraform files without plan output. Specify
          version "installed" to use the version already installed on the executor.
        required: false
        type: string
        default: ""

      snyk-organization:
        description: Snyk organisation name.
        required: false
        type: string
        default: ""

      snyk-token:
        description: Snyk API token.
        required: false
        type: string
        default: $SNYK_TOKEN

      snyk-additional-args:
        description: |
          Include any additional snyk commandline arguments.
        required: false
        type: string
        default: ""

      terrascan-version:
        description: |
          Perform terrascan scan of terraform files without plan output. Specify
          version "installed" to use the version already installed on the executor.
        required: false
        type: string
        default: ""

      terrascan-init-args:
        description: Provide custom init command flags.
        required: false
        type: string
        default: ""

      terrascan-iac-type:
        description: terrascan iac provider types.
        required: false
        type: string
        default: ""

      terrascan-policy-type:
        description: terrascan preset policy types. Default is all.
        required: false
        type: string
        default: "all"

      terrascan-custom-scan-args:
        description: |
          Override default settings with any valid terrascan scan flags.
        required: false
        type: string
        default: ""

      before-static-analysis:
        description: Optional steps to run before running static analysis
        required: false
        type: string
        default: echo "none"

      after-static-analysis:
        description: Optional steps to run before after static analysis
        required: false
        type: string
        default: echo "none"

jobs:

  terraform-static-code-analysis:
    name: terraform static code analysis
    runs-on: ubuntu-latest

    steps:
      - name: checkout code
        uses: actions/checkout@v4.1.1

      - name: install terraform workflow packages
        uses:  ThoughtWorks-DPS/terraform-action/packages@main
        with:
          working-directory: ${{ inputs.working-directory }}
          cosign-version: ${{ inputs.cosign-version }}
          terraform-version: ${{ inputs.terraform-version }}
          tflint-version: ${{ inputs.tflint-version }}
          tfsec-version: ${{ inputs.tfsec-version }}
          checkov-version: ${{ inputs.checkov-version }}
          snyk-version: ${{ inputs.snyk-version }}

      - name: run custom before-analysis scripts
        working-directory: ${{ inputs.working-directory }}
        shell: bash
        run: ${{ inputs.before-static-analysis }}

      - name: terraform init
        working-directory: ${{ inputs.working-directory }}
        shell: bash
        run: |
          terraform version
          terraform init ${{ inputs.terraform-init-additional-args }}

      - name: evaluate canonical format of terraform files 
        working-directory: ${{ inputs.working-directory }}
        shell: bash
        run: terraform fmt -check=false

      - name: validate terraform syntax
        working-directory: ${{ inputs.working-directory }}
        shell: bash
        run: terraform validate

      - name: optional tflint scan of terraform source files
        uses:  ThoughtWorks-DPS/terraform-action/tflint@main
        with:
          working-directory: ${{ inputs.working-directory }}
          tflint-version: ${{ inputs.tflint-version }}
          tflint-provider: ${{ inputs.tflint-provider }}
          tflint-provider-version: ${{ inputs.tflint-provider-version }}
          tflint-additional-args: ${{ inputs.tflint-additional-args }}

      - name: optional tfsec scan of terraform source files
        uses:  ThoughtWorks-DPS/terraform-action/tfsec@main
        with:
          working-directory: ${{ inputs.working-directory }}
          tfsec-version: ${{ inputs.tfsec-version }}
          tfsec-additional-args: ${{ inputs.tfsec-additional-args }}

      - name: optional checkov scan of terraform source files
        uses:  ThoughtWorks-DPS/terraform-action/checkov@main
        with:
          working-directory: ${{ inputs.working-directory }}
          checkov-version: ${{ inputs.checkov-version }}
          checkov-additional-args: ${{ inputs.checkov-additional-args }}

      - name: optional snyk scan of terraform source files
        uses:  ThoughtWorks-DPS/terraform-action/snyk@main
        with:
          working-directory: ${{ inputs.working-directory }}
          snyk-version: ${{ inputs.snyk-version }}
          snyk-organization: ${{ inputs.snyk-organization }}
          snyk-token: ${{ inputs.snyk-token }}
          snyk-additional-args: ${{ inputs.snyk-additional-args }}

      - name: optional terrascan scan of terraform source files
        uses:  ThoughtWorks-DPS/terraform-action/terrascan@main
        with:
          working-directory: ${{ inputs.working-directory }}
          terrascan-version: ${{ inputs.terrascan-version }}
          terrascan-init-args: ${{ inputs.terrascan-init-args }}
          terrascan-iac-type: ${{ inputs.terrascan-iac-type }}
          terrascan-policy-type: ${{ inputs.terrascan-policy-type }}

# driftctl
# infracost

      - name: run custom after-analysis scripts
        working-directory: ${{ inputs.working-directory }}
        shell: bash
        run: ${{ inputs.after-static-analysis }}




      # echo "action_state=yellow" >> "$GITHUB_ENV"