name: 'twdps terraform action'
description: |
  standard terraform pipeline actions.

  To use test-assume-role (AWS only feature), set the following additional ENV:
  - AWS_ACCOUNT_ID
  - AWS_DEFAULT_REGION
  - AWS_ASSUME_ROLE

  Assumes awspec or inspec has been installed on runner.

inputs:
  working-directory:
    description: set working directory; default is .
    required: false
    default: '.'
  terraform-version:
    description: use specific terraform version; default will use version on runner
    required: false
    default: 'default'
  terraform-cloud-token:
    description: use terraform cloud as remote backend store
    required: false
    default: 'false'
  tf-workspace:
    description: setup terraform workspace
    required: false
    default: ''
  tf-var-file:
    description: use specified tf-vars file
    required: false
    default: ''
  lint:
    description: run tflint
    required: false
    default: 'false'
  tflint-version:
    description: use specific terraform version; default will use latest
    required: false
    default: 'latest'
  tflint-provider:
    description: tflint cloud provider; default will use aws
    required: false
    default: aws
  fmt-check-terraform:
    description: validate farmating
    required: false
    default: 'false'
  validate-terraform:
    description: validate farmating
    required: false
    default: 'false'
  awspec-test:
    description: run awspec tests after successful terraform apply
    required: false
    default: 'false'
  awspec-test-directory:
    description: path to awspec tests
    required: false
    default: 'spec'
  inspec-test:
    description: run inspec tests after successful terraform apply
    required: false
    default: 'false'
  inspec-test-directory:
    description: path to inspec tests
    required: false
    default: 'profiles'
  test-assume-role:
    description: assume a role before running tests
    required: false
    default: 'false'
  init:
    description: terraform init
    required: false
    default: 'true'
  init-args:
    description: additional command line arguments for terraform init
    required: false
    default: ''
  plan:
    description: terraform plan
    required: false
    default: 'false'
  plan-args:
    description: additional command line arguments for terraform plan
    required: false
    default: ''
  apply:
    description: terraform apply
    required: false
    default: 'false'
  apply-args:
    description: additional command line arguments for terraform apply
    required: false
    default: ''
  destroy:
    description: terraform destroy
    required: false
    default: 'false'
  destroy-args:
    description: additional command line arguments for terraform destroy
    required: false
    default: ''
runs:
  using: "composite"
  steps:
    - name: terraform-version
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        if [[ "${{ inputs.terraform-version }}" != "default" ]]; then
          curl -SLO "https://releases.hashicorp.com/terraform/${{ inputs.terraform-version }}/terraform_${{ inputs.terraform-version }}_linux_amd64.zip" > "terraform_${{ inputs.terraform-version }}_linux_amd64.zip"
          sudo unzip -o "terraform_${{ inputs.terraform-version }}_linux_amd64.zip" -d /usr/local/bin
        fi
        terraform version

    - name: terraform-cloud
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        if [[ "${{ inputs.terraform-cloud-token }}" != "false" ]]; then
          echo "with.terraform-cloud-token = true"
          cat <<EOF > ~/.terraformrc
        credentials "app.terraform.io" {
          token = "${{ inputs.terraform-cloud-token }}"
        }
        EOF
        fi

    - name: lint
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        if [[ "${{ inputs.lint }}" == "true" ]]; then
          echo "with.tflint = true"
          if [[ ! -f ".tflint.hcl" ]]; then
            echo "plugin \"${{ inputs.tflint-provider }}\" { enabled = true }" > .tflint.hcl
          else
            echo ".tflint.hcl already exists in working directory"
          fi
          docker run --rm ghcr.io/terraform-linters/tflint-bundle:${{ inputs.tflint-version }} --version
          docker run --rm -v $(pwd):/data -t ghcr.io/terraform-linters/tflint-bundle:${{ inputs.tflint-version }} --loglevel=info
        fi

    - name: init
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        if [[ "${{ inputs.init }}" == "true" ]]; then
          echo "with.init = true"
          terraform init ${{ inputs.init-args }}
        fi

    - name: fmt-check-terraform
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        if [[ "${{ inputs.fmt-check-terraform }}" == "true" ]]; then
          echo "with.fmt-check-terraform = true"
          terraform fmt -write=false -check=true -diff
        fi

    - name: validate-terraform
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        if [[ "${{ inputs.validate-terraform }}" == "true" ]]; then
          echo "with.validate-terraform = true"
          terraform validate
        fi

    - name: plan
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        if [[ "${{ inputs.plan }}" == "true" ]]; then
          echo "with.plan = true"
          terraform plan ${{ inputs.tf-var-file }} ${{ inputs.plan-args }}
        fi

    - name: apply
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        if [[ "${{ inputs.apply }}" == "true" ]]; then
          echo "with.apply = true"
          terraform apply --auto-approve ${{ inputs.tf-var-file }} ${{ inputs.plan-args }}
        fi

    - name: awspec test
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        if [[ "${{ inputs.awspec-test }}" == "true" ]]; then
          echo "with.awspec-test = true"
          if [[ "${{ inputs.test-assume-role }}" != "false" ]]; then
            aws sts assume-role --output json --role-arn arn:aws:iam::$AWS_ACCOUNT_ID:role/$AWS_ASSUME_ROLE --role-session-name eks-configuration-test > credentials
            export AWS_ACCESS_KEY_ID=$(cat credentials | jq -r ".Credentials.AccessKeyId")
            export AWS_SECRET_ACCESS_KEY=$(cat credentials | jq -r ".Credentials.SecretAccessKey")
            export AWS_SESSION_TOKEN=$(cat credentials | jq -r ".Credentials.SessionToken")
          fi
          rspec ${{ inputs.awspec-test-directory }}
        fi

    - name: inspec test
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        if [[ "${{ inputs.inspec-test }}" == "true" ]]; then
          echo "with.inspec-test = true"
          if [[ "${{ inputs.test-assume-role }}" != "false" ]]; then
            aws sts assume-role --output json --role-arn arn:aws:iam::$AWS_ACCOUNT_ID:role/$AWS_ASSUME_ROLE --role-session-name eks-configuration-test > credentials
            export AWS_ACCESS_KEY_ID=$(cat credentials | jq -r ".Credentials.AccessKeyId")
            export AWS_SECRET_ACCESS_KEY=$(cat credentials | jq -r ".Credentials.SecretAccessKey")
            export AWS_SESSION_TOKEN=$(cat credentials | jq -r ".Credentials.SessionToken")
          fi
          ${{ inputs.inspec-test-directory }}
        fi

    - name: destroy
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        if [[ "${{ inputs.destroy }}" == "true" ]]; then
          echo "with.destroy = true"
          terraform destroy --auto-approve ${{ inputs.tf-var-file }}  ${{ inputs.destroy-args }}
        fi
